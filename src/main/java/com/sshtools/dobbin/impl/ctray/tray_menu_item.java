/**
 * Copyright Â© 2025 SSHTOOLS Limited (support@sshtools.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by jextract

package com.sshtools.dobbin.impl.ctray;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.ValueLayout.OfInt;
import java.lang.invoke.MethodHandle;
import java.util.function.Consumer;

/**
 * {@snippet lang=c :
 * struct tray_menu_item {
 *     const char *text;
 *     int disabled;
 *     int checked;
 *     int checkbox;
 *     void (*cb)(struct tray_menu_item *);
 *     struct tray_menu_item *submenu;
 * }
 * }
 */
public class tray_menu_item {

    tray_menu_item() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        tray_h.C_POINTER.withName("text"),
        tray_h.C_INT.withName("disabled"),
        tray_h.C_INT.withName("checked"),
        tray_h.C_INT.withName("checkbox"),
        MemoryLayout.paddingLayout(4),
        tray_h.C_POINTER.withName("cb"),
        tray_h.C_POINTER.withName("submenu")
    ).withName("tray_menu_item");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *text
     * }
     */
    public static final AddressLayout text$layout() {
        return text$LAYOUT;
    }

    private static final long text$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *text
     * }
     */
    public static final long text$offset() {
        return text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *text
     * }
     */
    public static MemorySegment text(MemorySegment struct) {
        return struct.get(text$LAYOUT, text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *text
     * }
     */
    public static void text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(text$LAYOUT, text$OFFSET, fieldValue);
    }

    private static final OfInt disabled$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int disabled
     * }
     */
    public static final OfInt disabled$layout() {
        return disabled$LAYOUT;
    }

    private static final long disabled$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int disabled
     * }
     */
    public static final long disabled$offset() {
        return disabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int disabled
     * }
     */
    public static int disabled(MemorySegment struct) {
        return struct.get(disabled$LAYOUT, disabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int disabled
     * }
     */
    public static void disabled(MemorySegment struct, int fieldValue) {
        struct.set(disabled$LAYOUT, disabled$OFFSET, fieldValue);
    }

    private static final OfInt checked$LAYOUT = (OfInt)$LAYOUT.select(groupElement("checked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int checked
     * }
     */
    public static final OfInt checked$layout() {
        return checked$LAYOUT;
    }

    private static final long checked$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int checked
     * }
     */
    public static final long checked$offset() {
        return checked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int checked
     * }
     */
    public static int checked(MemorySegment struct) {
        return struct.get(checked$LAYOUT, checked$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int checked
     * }
     */
    public static void checked(MemorySegment struct, int fieldValue) {
        struct.set(checked$LAYOUT, checked$OFFSET, fieldValue);
    }

    private static final OfInt checkbox$LAYOUT = (OfInt)$LAYOUT.select(groupElement("checkbox"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int checkbox
     * }
     */
    public static final OfInt checkbox$layout() {
        return checkbox$LAYOUT;
    }

    private static final long checkbox$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int checkbox
     * }
     */
    public static final long checkbox$offset() {
        return checkbox$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int checkbox
     * }
     */
    public static int checkbox(MemorySegment struct) {
        return struct.get(checkbox$LAYOUT, checkbox$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int checkbox
     * }
     */
    public static void checkbox(MemorySegment struct, int fieldValue) {
        struct.set(checkbox$LAYOUT, checkbox$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*cb)(struct tray_menu_item *)
     * }
     */
    public static class cb {

        cb() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            tray_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = tray_h.upcallHandle(cb.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cb.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*cb)(struct tray_menu_item *)
     * }
     */
    public static final AddressLayout cb$layout() {
        return cb$LAYOUT;
    }

    private static final long cb$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*cb)(struct tray_menu_item *)
     * }
     */
    public static final long cb$offset() {
        return cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*cb)(struct tray_menu_item *)
     * }
     */
    public static MemorySegment cb(MemorySegment struct) {
        return struct.get(cb$LAYOUT, cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*cb)(struct tray_menu_item *)
     * }
     */
    public static void cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cb$LAYOUT, cb$OFFSET, fieldValue);
    }

    private static final AddressLayout submenu$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("submenu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct tray_menu_item *submenu
     * }
     */
    public static final AddressLayout submenu$layout() {
        return submenu$LAYOUT;
    }

    private static final long submenu$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct tray_menu_item *submenu
     * }
     */
    public static final long submenu$offset() {
        return submenu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct tray_menu_item *submenu
     * }
     */
    public static MemorySegment submenu(MemorySegment struct) {
        return struct.get(submenu$LAYOUT, submenu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct tray_menu_item *submenu
     * }
     */
    public static void submenu(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(submenu$LAYOUT, submenu$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

