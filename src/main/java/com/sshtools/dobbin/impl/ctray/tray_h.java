// Generated by jextract

package com.sshtools.dobbin.impl.ctray;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import com.sshtools.nih.Native;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class tray_h {

    tray_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = Native.load("tray", LIBRARY_ARENA);

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * struct tray *tray_get_instance()
     * }
     */
    public static class tray_get_instance {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tray_h.C_POINTER        );
        private static final MemorySegment ADDR = tray_h.findOrThrow("tray_get_instance");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private tray_get_instance(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * struct tray *tray_get_instance()
         * }
         */
        public static tray_get_instance makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new tray_get_instance(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("tray_get_instance", x0);
                }
                return (MemorySegment) spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class tray_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tray_h.C_INT,
            tray_h.C_POINTER
        );

        public static final MemorySegment ADDR = tray_h.findOrThrow("tray_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tray_init(struct tray *tray)
     * }
     */
    public static FunctionDescriptor tray_init$descriptor() {
        return tray_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tray_init(struct tray *tray)
     * }
     */
    public static MethodHandle tray_init$handle() {
        return tray_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tray_init(struct tray *tray)
     * }
     */
    public static MemorySegment tray_init$address() {
        return tray_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tray_init(struct tray *tray)
     * }
     */
    public static int tray_init(MemorySegment tray) {
        var mh$ = tray_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tray_init", tray);
            }
            return (int)mh$.invokeExact(tray);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tray_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tray_h.C_INT,
            tray_h.C_INT
        );

        public static final MemorySegment ADDR = tray_h.findOrThrow("tray_loop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tray_loop(int blocking)
     * }
     */
    public static FunctionDescriptor tray_loop$descriptor() {
        return tray_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tray_loop(int blocking)
     * }
     */
    public static MethodHandle tray_loop$handle() {
        return tray_loop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tray_loop(int blocking)
     * }
     */
    public static MemorySegment tray_loop$address() {
        return tray_loop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tray_loop(int blocking)
     * }
     */
    public static int tray_loop(int blocking) {
        var mh$ = tray_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tray_loop", blocking);
            }
            return (int)mh$.invokeExact(blocking);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tray_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tray_h.C_POINTER
        );

        public static final MemorySegment ADDR = tray_h.findOrThrow("tray_update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tray_update(struct tray *tray)
     * }
     */
    public static FunctionDescriptor tray_update$descriptor() {
        return tray_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tray_update(struct tray *tray)
     * }
     */
    public static MethodHandle tray_update$handle() {
        return tray_update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tray_update(struct tray *tray)
     * }
     */
    public static MemorySegment tray_update$address() {
        return tray_update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tray_update(struct tray *tray)
     * }
     */
    public static void tray_update(MemorySegment tray) {
        var mh$ = tray_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tray_update", tray);
            }
            mh$.invokeExact(tray);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tray_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = tray_h.findOrThrow("tray_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tray_exit()
     * }
     */
    public static FunctionDescriptor tray_exit$descriptor() {
        return tray_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tray_exit()
     * }
     */
    public static MethodHandle tray_exit$handle() {
        return tray_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tray_exit()
     * }
     */
    public static MemorySegment tray_exit$address() {
        return tray_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tray_exit()
     * }
     */
    public static void tray_exit() {
        var mh$ = tray_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tray_exit");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

