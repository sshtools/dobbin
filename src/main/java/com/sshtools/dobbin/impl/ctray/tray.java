// Generated by jextract

package com.sshtools.dobbin.impl.ctray;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tray {
 *     const char *icon_filepath;
 *     char *tooltip;
 *     void (*cb)(struct tray *);
 *     struct tray_menu_item *menu;
 * }
 * }
 */
public class tray {

    tray() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        tray_h.C_POINTER.withName("icon_filepath"),
        tray_h.C_POINTER.withName("tooltip"),
        tray_h.C_POINTER.withName("cb"),
        tray_h.C_POINTER.withName("menu")
    ).withName("tray");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout icon_filepath$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("icon_filepath"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *icon_filepath
     * }
     */
    public static final AddressLayout icon_filepath$layout() {
        return icon_filepath$LAYOUT;
    }

    private static final long icon_filepath$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *icon_filepath
     * }
     */
    public static final long icon_filepath$offset() {
        return icon_filepath$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *icon_filepath
     * }
     */
    public static MemorySegment icon_filepath(MemorySegment struct) {
        return struct.get(icon_filepath$LAYOUT, icon_filepath$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *icon_filepath
     * }
     */
    public static void icon_filepath(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(icon_filepath$LAYOUT, icon_filepath$OFFSET, fieldValue);
    }

    private static final AddressLayout tooltip$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tooltip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *tooltip
     * }
     */
    public static final AddressLayout tooltip$layout() {
        return tooltip$LAYOUT;
    }

    private static final long tooltip$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *tooltip
     * }
     */
    public static final long tooltip$offset() {
        return tooltip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *tooltip
     * }
     */
    public static MemorySegment tooltip(MemorySegment struct) {
        return struct.get(tooltip$LAYOUT, tooltip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *tooltip
     * }
     */
    public static void tooltip(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tooltip$LAYOUT, tooltip$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*cb)(struct tray *)
     * }
     */
    public static class cb {

        cb() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            tray_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = tray_h.upcallHandle(cb.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cb.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*cb)(struct tray *)
     * }
     */
    public static final AddressLayout cb$layout() {
        return cb$LAYOUT;
    }

    private static final long cb$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*cb)(struct tray *)
     * }
     */
    public static final long cb$offset() {
        return cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*cb)(struct tray *)
     * }
     */
    public static MemorySegment cb(MemorySegment struct) {
        return struct.get(cb$LAYOUT, cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*cb)(struct tray *)
     * }
     */
    public static void cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cb$LAYOUT, cb$OFFSET, fieldValue);
    }

    private static final AddressLayout menu$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("menu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct tray_menu_item *menu
     * }
     */
    public static final AddressLayout menu$layout() {
        return menu$LAYOUT;
    }

    private static final long menu$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct tray_menu_item *menu
     * }
     */
    public static final long menu$offset() {
        return menu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct tray_menu_item *menu
     * }
     */
    public static MemorySegment menu(MemorySegment struct) {
        return struct.get(menu$LAYOUT, menu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct tray_menu_item *menu
     * }
     */
    public static void menu(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(menu$LAYOUT, menu$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

